# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2025 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

# spec.gmk is generated by configure and contains many of the variable definitions used in this makefile
ifeq (,$(wildcard $(SPEC)))
  $(error OpenJ9.gmk needs SPEC set to a proper spec.gmk)
endif

include $(SPEC)
include $(SRC_ROOT)/make/common/MakeBase.gmk

ifeq (,$(BUILD_ID))
  BUILD_ID := 000000
endif

# Auxiliary variables for communication between GetVersion and ShowVersions.
VersionLabelWidth := 1
VersionPairs :=

# GetVersion
# ----------
# $1 - repository display name
# $2 - variable name
# $3 - root directory of git repository
# $4 - 'required' for a required repository, anything else for an optional one
GetVersion = $(eval $(call GetVersionHelper,$(strip $1),$(strip $2),$(strip $3),$(strip $4)))
define GetVersionHelper
  $2 := $$(if $(wildcard $3),$$(shell $(GIT) -C $3 rev-parse --short HEAD))
  ifneq (,$$($2))
    VersionLabelWidth := $(shell $(ECHO) "$1" | $(AWK) "{ width = length; print (width > $(VersionLabelWidth) ? width : $(VersionLabelWidth)) }")
    VersionPairs += "$1" "$$($2)"
  else ifeq ($4,required)
    $$(error Could not determine $2 for $3)
  endif
endef # GetVersionHelper

# ShowVersions
# ---------
define ShowVersions
	@$(PRINTF) "  Source version info:\n"
	@$(PRINTF) "    %-$(VersionLabelWidth)s - %s\n" $(VersionPairs)
endef # ShowVersions

$(call GetVersion, openjdk,  OPENJDK_SHA,   $(TOPDIR),           required)
$(call GetVersion, openj9,   OPENJ9_SHA,    $(OPENJ9_TOPDIR),    required)
$(call GetVersion, omr,      OPENJ9OMR_SHA, $(OPENJ9OMR_TOPDIR), required)
$(call GetVersion, openssl,  OPENSSL_SHA,   $(OPENSSL_DIR))
$(call GetVersion, vendor,   VENDOR_SHA,    $(VENDOR_TOPDIR))

# Find OpenJ9 tag associated with current commit (suppressing stderr in case there is no such tag).
OPENJ9_TAG := $(shell $(GIT) -C $(OPENJ9_TOPDIR) describe --exact-match HEAD 2>/dev/null)
ifneq (,$(OPENJ9_TAG))
  OPENJ9_VERSION_STRING := $(OPENJ9_TAG)
else
  OPENJ9_BRANCH := $(shell $(GIT) -C $(OPENJ9_TOPDIR) rev-parse --abbrev-ref HEAD)
  ifeq (,$(OPENJ9_BRANCH))
    $(error Could not determine OpenJ9 branch)
  endif
  # Map characters in the branch name other than [A-Za-z0-9.] to '-' so the resulting
  # version string is acceptable to Runtime.Version.parse().
  OPENJ9_BRANCH := $(shell $(PRINTF) '%s' '$(OPENJ9_BRANCH)' | $(TR) -c 'A-Za-z0-9.' '-')
  OPENJ9_VERSION_STRING := $(OPENJ9_BRANCH)-$(OPENJ9_SHA)
endif

# openjdk makeflags don't work with openj9/omr native compiles
override MAKEFLAGS :=
# specify desired parallelism
ifneq (,$(JOBS))
  MAKE_ARGS += -j $(JOBS)
endif

ifeq (windows,$(OPENJDK_TARGET_OS))
  # convert unix path to windows path
  FixPath = $(shell $(CYGPATH) -m $1)
  # convert windows path to unix path
  UnixPath = $(shell $(CYGPATH) -u $1)
else
  FixPath = $1
  UnixPath = $1
endif

.PHONY : \
	build-j9vm \
	generate-j9jcl-sources \
	generate-j9-version-headers \
	openj9-config-headers \
	#

define openj9_config_header_rules
  openj9-config-headers : $(JDK_OUTPUTDIR)/openj9_include/$(notdir $1)

  $(JDK_OUTPUTDIR)/openj9_include/$(notdir $1) : $1
	$$(call install-file)
endef

$(foreach file, \
	j9cfg.h omr/omrcfg.h, \
	$(eval $(call openj9_config_header_rules, $(OPENJ9_VM_BUILD_DIR)/$(file))))

J9TOOLS_DIR := $(JDK_OUTPUTDIR)/j9tools

OPENJ9_VERSION_VARS := \
	COMPANY_NAME \
	CXX_VERSION_STRING \
	DEBUG_LEVEL \
	J9JDK_EXT_NAME \
	J9JDK_EXT_VERSION \
	JRE_RELEASE_VERSION \
	OPENJ9_TAG \
	OPENJ9_VERSION_STRING \
	OPENJDK_SHA \
	OPENJDK_TAG \
	OPENJDK_TARGET_CPU_BITS \
	OPENJDK_TARGET_CPU_OSARCH \
	OPENJDK_TARGET_OS \
	PRODUCT_NAME \
	PRODUCT_SUFFIX \
	USERNAME \
	VENDOR_SHA \
	VENDOR_URL \
	#

OPENJ9_VERSION_SCRIPT := \
	$(if $(VENDOR_SHA),,-e '/ VENDOR_SHA /d') \
	$(foreach var,$(OPENJ9_VERSION_VARS),-e 's|@$(var)@|$(value $(var))|g')

# create_or_update
# ----------------
# Create a file or update it if necessary.
# --
# param 1 = command yielding desired content to stdout
# param 2 = file to be created or updated
define create_or_update
	@$(MKDIR) -p $(dir $2)
	$1 > $2.tmp
	@if [ -f $2 ] && $(DIFF) -q $2 $2.tmp > /dev/null ; then \
		$(RM) $2.tmp ; \
	else \
		$(MV) $2.tmp $2 ; \
	fi
endef

CUSTOM_COMPILER_ENV_VARS :=

ifneq (,$(OPENJ9_CC))
  CUSTOM_COMPILER_ENV_VARS += CC="$(OPENJ9_CC)"
endif
ifneq (,$(OPENJ9_CXX))
  CUSTOM_COMPILER_ENV_VARS += CXX="$(OPENJ9_CXX)"
endif
ifneq (,$(OPENJ9_DEVELOPER_DIR))
  CUSTOM_COMPILER_ENV_VARS += DEVELOPER_DIR="$(OPENJ9_DEVELOPER_DIR)"
endif

generate-j9-version-headers :
	@$(ECHO) Ensuring version information is up-to-date
	$(call create_or_update, \
		$(ECHO) '#define OMR_VERSION_STRING "$(OPENJ9OMR_SHA)"', \
		$(OPENJ9_VM_BUILD_DIR)/omr/OMR_VERSION_STRING)
	$(call create_or_update, \
		$(ECHO) '#define TR_LEVEL_NAME "$(OPENJ9_SHA)"', \
		$(OPENJ9_VM_BUILD_DIR)/compiler/jit.version)
	$(call create_or_update, \
		@$(SED) $(OPENJ9_VERSION_SCRIPT) < $(SRC_ROOT)/closed/openj9_version_info.h.in, \
		$(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h)
	@$(ECHO) "==== openj9_version_info.h ===="
	@$(GREP) define $(OPENJ9_VM_BUILD_DIR)/include/openj9_version_info.h
	@$(ECHO) "===="

CMAKE_ARGS := \
	-C $(OPENJ9_TOPDIR)/runtime/cmake/caches/$(patsubst %_cross,%,$(OPENJ9_BUILDSPEC)).cmake \
	-DBOOT_JDK=$(BOOT_JDK) \
	-DBUILD_ID=$(BUILD_ID) \
	-DCMAKE_TOOLCHAIN_FILE="$(OUTPUT_ROOT)/toolchain.cmake" \
	-DJ9VM_OMR_DIR=$(OPENJ9OMR_TOPDIR) \
	-DJAVA_SPEC_VERSION=8 \
	-DOMR_DDR=$(OPENJ9_ENABLE_DDR) \
	-DOPENJ9_SHA=$(OPENJ9_SHA) \
	#

ifneq (,$(VENDOR_TOPDIR))
  CMAKE_ARGS += -DJ9VM_VENDOR_DIR=$(VENDOR_TOPDIR)
else
  CMAKE_ARGS += -DOPENJ9_BUILD=true
endif

ifeq (windows,$(OPENJDK_TARGET_OS))
  CMAKE_ARGS += -DOPENJDK_VERSION_NUMBER_FOUR_POSITIONS=$(VERSION_NUMBER_FOUR_POSITIONS)
else
  # Windows can't specify compiler overrides since we use wrapper scripts.
  # Override the compilers if an OPENJ9_* value is specified.
  # Otherwise, toolchain.cmake has the default values.
  ifneq (,$(OPENJ9_CC))
    CMAKE_ARGS += -DCMAKE_C_COMPILER="$(OPENJ9_CC)"
  endif

  ifneq (,$(OPENJ9_CXX))
    CMAKE_ARGS += -DCMAKE_CXX_COMPILER="$(OPENJ9_CXX)"
  endif
endif # windows

ifeq (true,$(OPENJ9_ENABLE_CUDA))
  CMAKE_ARGS += -DJ9VM_OPT_CUDA=ON -DOMR_CUDA_HOME="$(call UnixPath,$(CUDA_HOME))"
else
  CMAKE_ARGS += -DJ9VM_OPT_CUDA=OFF
endif # OPENJ9_ENABLE_CUDA

ifneq (,$(CCACHE))
  # openjdk makefiles adds a bunch of environemnt variables to the ccache command.
  # CMake will not parse this properly, so we wrap the whole thing in the env command.
  # We also need to add semicolons between arguments or else cmake will treat the whole
  # thing as one long command name.

  # Note: we remove the CCACHE_COMPRESS option that openjdk adds, because it significantly
  # slows down the build (to the point of erasing any gains from using ccache).
  CCACHE_NOCOMPRESS := $(filter-out CCACHE_COMPRESS=1,$(CCACHE))
  ESCAPED_CCACHE := env$(subst $(SPACE),,$(addprefix ;,$(CCACHE_NOCOMPRESS)))

  CMAKE_ARGS += "-DCMAKE_CXX_COMPILER_LAUNCHER=$(ESCAPED_CCACHE)"
  CMAKE_ARGS += "-DCMAKE_C_COMPILER_LAUNCHER=$(ESCAPED_CCACHE)"
endif # CCACHE

ifeq (true,$(OPENJ9_ENABLE_JFR))
  CMAKE_ARGS += -DJ9VM_OPT_JFR=ON
else # OPENJ9_ENABLE_JFR
  CMAKE_ARGS += -DJ9VM_OPT_JFR=OFF
endif # OPENJ9_ENABLE_JFR

ifeq (true,$(OPENJ9_ENABLE_JITSERVER))
  CMAKE_ARGS += -DJ9VM_OPT_JITSERVER=ON

  ifneq (,$(OPENSSL_DIR))
    CMAKE_ARGS += -DOPENSSL_DIR="$(OPENSSL_DIR)"
  endif

  ifneq (,$(OPENSSL_BUNDLE_LIB_PATH))
    CMAKE_ARGS += -DOPENSSL_BUNDLE_LIB_PATH="$(OPENSSL_BUNDLE_LIB_PATH)"
  endif
else
  CMAKE_ARGS += -DJ9VM_OPT_JITSERVER=OFF
endif # OPENJ9_ENABLE_JITSERVER

ifeq (true,$(OPENJ9_ENABLE_CRIU_SUPPORT))
  CMAKE_ARGS += -DJ9VM_OPT_CRIU_SUPPORT=ON
else # OPENJ9_ENABLE_CRIU_SUPPORT
  CMAKE_ARGS += -DJ9VM_OPT_CRIU_SUPPORT=OFF
endif # OPENJ9_ENABLE_CRIU_SUPPORT

ifeq (true,$(OPENJ9_ENABLE_OPENJDK_METHODHANDLES))
  CMAKE_ARGS += -DJ9VM_OPT_OPENJDK_METHODHANDLE=ON
  CMAKE_ARGS += -DJ9VM_OPT_METHOD_HANDLE=OFF
else # OPENJ9_ENABLE_OPENJDK_METHODHANDLES
  CMAKE_ARGS += -DJ9VM_OPT_METHOD_HANDLE=ON
  CMAKE_ARGS += -DJ9VM_OPT_OPENJDK_METHODHANDLE=OFF
endif # OPENJ9_ENABLE_OPENJDK_METHODHANDLES

ifeq (true,$(OPENJ9_ENABLE_SNAPSHOTS))
  CMAKE_ARGS += -DJ9VM_OPT_SNAPSHOTS=ON
else # OPENJ9_ENABLE_SNAPSHOTS
  CMAKE_ARGS += -DJ9VM_OPT_SNAPSHOTS=OFF
endif # OPENJ9_ENABLE_SNAPSHOTS

ifneq (,$(filter debug trace, $(LOG_LEVEL)))
  # The user said LOG=debug or LOG=trace, so tell cmake to echo commands.
  CMAKE_ARGS += -DCMAKE_VERBOSE_MAKEFILE=ON
endif

# Propagate configure option '--disable-warnings-as-errors-omr' to OMR.
ifeq (false,$(WARNINGS_AS_ERRORS_OMR))
  CMAKE_ARGS += -DOMR_WARNINGS_AS_ERRORS=OFF
endif

# Propagate configure option '--disable-warnings-as-errors-openj9' to OpenJ9.
ifeq (false,$(WARNINGS_AS_ERRORS_OPENJ9))
  CMAKE_ARGS += -DJ9VM_WARNINGS_AS_ERRORS=OFF
endif

# Do this last so extra args take precedence.
CMAKE_ARGS += $(EXTRA_CMAKE_ARGS)

$(OUTPUT_ROOT)/vm/cmake.stamp :
	@$(MKDIR) -p $(@D)
	cd $(@D) && $(CMAKE) $(CMAKE_ARGS) $(OPENJ9_TOPDIR)
	$(TOUCH) $@

  # Both cmake and the makefiles it generates are sensitive to the VERBOSE
  # environment variable. This removes VERBOSE from the environment altogether
  # for build behavior that's consistent with newer jdk versions.
  MAKE_VM := unset VERBOSE && $(filter-out VERBOSE=%, $(MAKE))

build-j9vm : $(OUTPUT_ROOT)/vm/cmake.stamp generate-j9-version-headers generate-j9jcl-sources
	@$(ECHO) "Compiling OpenJ9 in $(OUTPUT_ROOT)/vm"
	$(call ShowVersions)
	+$(CUSTOM_COMPILER_ENV_VARS) \
		$(MAKE_VM) $(MAKE_ARGS) -C $(OUTPUT_ROOT)/vm JAVA_VERSION=80 VERSION_MAJOR=8 all
	@$(ECHO) OpenJ9 compile complete

J9JCL_SOURCES_DONEFILE := $(J9JCL_SOURCES_DIR)/j9jcl.done

RecursiveWildcard = $(foreach dir,$(wildcard $1/*),$(call RecursiveWildcard,$(dir),$2) $(filter $(subst *,%,$2),$(dir)))
JppSourceDirs := $(OPENJ9_TOPDIR)/jcl/src
JppSourceDirs += $(TOPDIR)/closed/adds/jdk/src

ifeq (true,$(OPENJ9_ENABLE_DDR))
  JppSourceDirs += $(OPENJ9_TOPDIR)/debugtools/DDR_VM/src
endif # OPENJ9_ENABLE_DDR

JPP_DEST := $(J9JCL_SOURCES_DIR)/jdk/src/share/classes
JPP_JAR  := $(J9TOOLS_DIR)/jpp.jar
JPP_TAGS := PLATFORM-$(OPENJ9_PLATFORM_CODE)

ifeq (true,$(OPENJ9_ENABLE_CRIU_SUPPORT))
  JPP_TAGS += CRIU_SUPPORT
endif # OPENJ9_ENABLE_CRIU_SUPPORT

ifeq (true,$(OPENJ9_ENABLE_OPENJDK_METHODHANDLES))
  JPP_TAGS += OPENJDK_METHODHANDLES
endif # OPENJ9_ENABLE_OPENJDK_METHODHANDLES

ifeq (true,$(OPENJ9_ENABLE_SNAPSHOTS))
  JPP_TAGS += RAM_CLASS_CACHE_SUPPORT
endif # OPENJ9_ENABLE_SNAPSHOTS

# invoke JPP to preprocess java source files
# $1 - configuration
# $2 - source directory
# $3 - destination subdirec
# more arguments can be appended after the expanded RunJPP such as $(IncludeIfUnsure)
define RunJPP
	@$(BOOT_JDK)/bin/java \
		-cp "$(call FixPath,$(JPP_JAR))" \
		-Dfile.encoding=US-ASCII \
		com.ibm.jpp.commandline.CommandlineBuilder \
			-verdict \
			-config $1 \
			-baseDir "$(call FixPath,$(dir $2))" \
			-srcRoot $(notdir $2)/ \
			-xml "$(call FixPath,$(OPENJ9_TOPDIR)/jcl/jpp_configuration.xml)" \
			-dest "$(call FixPath,$(strip $3))" \
			-tag:define "$(subst $(SPACE),;,$(sort $(JPP_TAGS)))"
endef # RunJPP

IncludeIfUnsure := -includeIfUnsure -noWarnIncludeIf

$(J9JCL_SOURCES_DONEFILE) : \
		$(foreach dir, $(JppSourceDirs), $(call RecursiveWildcard,$(dir),*))
	@$(ECHO) Building OpenJ9 Java Preprocessor
	@$(MKDIR) -p $(J9TOOLS_DIR)
	$(MAKE) $(MAKE_ARGS) -C $(OPENJ9_TOPDIR)/sourcetools -f buildj9tools.mk \
		BOOT_JDK=$(BOOT_JDK) \
		DEST_DIR=$(call FixPath,$(J9TOOLS_DIR)) \
		JAVA_HOME=$(BOOT_JDK) \
		preprocessor
	@$(ECHO) Generating J9JCL sources
	$(call RunJPP, GENERIC, $(TOPDIR)/closed/adds/jdk/src/share/classes, $(JPP_DEST)) \
		$(IncludeIfUnsure)
  ifneq (,$(VENDOR_TOPDIR))
	$(call RunJPP, SIDECAR18-SE-VENDOR, $(OPENJ9_TOPDIR)/jcl, $(JPP_DEST))
	$(call RunJPP, SIDECAR18-SE-VENDORSRC, $(VENDOR_TOPDIR)/jcl, $(JPP_DEST))
  else
	$(call RunJPP, SIDECAR18-SE-OPENJ9, $(OPENJ9_TOPDIR)/jcl, $(JPP_DEST))
  endif
  ifeq (true,$(OPENJ9_ENABLE_DDR))
	@$(ECHO) Generating DDR_VM sources
	$(call RunJPP, GENERIC, $(OPENJ9_TOPDIR)/debugtools/DDR_VM/src, $(J9JCL_SOURCES_DIR)/ddr) \
		$(IncludeIfUnsure) \
		-macro:define "JAVA_SPEC_VERSION=8"
  endif # OPENJ9_ENABLE_DDR
	@$(MKDIR) -p $(@D)
	@$(TOUCH) $@

generate-j9jcl-sources : $(J9JCL_SOURCES_DONEFILE)
