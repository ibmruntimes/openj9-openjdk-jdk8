# ===========================================================================
# (c) Copyright IBM Corp. 2017, 2020 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

# Remove -R from MAKE settings as some built-in rules are needed for OMR.
MAKE := $(filter-out -R,$(MAKE))

OPENJ9_TOPDIR           := @OPENJ9_TOPDIR@
OPENJ9OMR_TOPDIR        := @OPENJ9OMR_TOPDIR@

# compiler overrides
OPENJ9_CC               := @OPENJ9_CC@
OPENJ9_CXX              := @OPENJ9_CXX@
OPENJ9_DEVELOPER_DIR    := @OPENJ9_DEVELOPER_DIR@

# CUDA
OPENJ9_ENABLE_CUDA      := @OPENJ9_ENABLE_CUDA@
ifneq (,@OPENJ9_CUDA_HOME@)
export CUDA_HOME        := @OPENJ9_CUDA_HOME@
endif
ifneq (,@OPENJ9_GDK_HOME@)
export GDK_HOME         := @OPENJ9_GDK_HOME@
endif

# OPENSSL
OPENSSL_DIR             := @OPENSSL_DIR@
BUILD_OPENSSL           := @BUILD_OPENSSL@
OPENSSL_CFLAGS          := @OPENSSL_CFLAGS@
OPENSSL_BUNDLE_LIB_PATH := @OPENSSL_BUNDLE_LIB_PATH@
WITH_OPENSSL            := @WITH_OPENSSL@

## DDR
OPENJ9_ENABLE_DDR       := @OPENJ9_ENABLE_DDR@

# JITSERVER
OPENJ9_ENABLE_JITSERVER := @OPENJ9_ENABLE_JITSERVER@

# for constructing version output
COMPILER_VERSION_STRING := @COMPILER_VERSION_STRING@
USERNAME                := @USERNAME@
OPENJDK_SHA             := @OPENJDK_SHA@

include $(SRC_ROOT)/closed/openjdk-tag.gmk

JDK_MOD_VERSION         := @JDK_MOD_VERSION@
JDK_FIX_VERSION         := @JDK_FIX_VERSION@
J9JDK_EXT_VERSION       := $(JDK_MINOR_VERSION).$(JDK_MICRO_VERSION).$(JDK_MOD_VERSION).$(JDK_FIX_VERSION)-m2
#J9JDK_EXT_VERSION       := HEAD
J9JDK_EXT_NAME          := Extensions for OpenJDK for Eclipse OpenJ9

# required by CMake
CMAKE                       := @CMAKE@
export OPENJ9_ENABLE_CMAKE  := @OPENJ9_ENABLE_CMAKE@

# required by UMA
FREEMARKER_JAR          := @FREEMARKER_JAR@
OPENJ9_BUILDSPEC        := @OPENJ9_BUILDSPEC@

# required by JPP
OPENJ9_PLATFORM_CODE    := @OPENJ9_PLATFORM_CODE@

OPENJ9_LIBS_SUBDIR      := @OPENJ9_LIBS_SUBDIR@

# Export autoconf cache variables for CC/CXX.
# This is for the case where ccache is enabled.
# It ensures that OMR autoconf uses the compiler, not ccache.
export ac_cv_prog_CC    := @CC@
export ac_cv_prog_CXX   := @CXX@

# Windows
MSVCP_DLL               := @MSVCP_DLL@

COPY_JVM_CFG_FILE       := true

ifeq ($(OPENJDK_BUILD_OS), macosx)
  # MACOSX_DEPLOYMENT_TARGET acts similar to -mmacosx-version-min=version
  # compiler option. If both the compiler option is specified and the
  # environment variable is set, then the compiler option will take
  # precedence. Here, MACOSX_DEPLOYMENT_TARGET environment variable and
  # the compiler option will point to the same version. The environment
  # variable is defined to support dependencies where the compiler option
  # is not applied.
  export MACOSX_DEPLOYMENT_TARGET := @MACOSX_VERSION_MIN@
    
  # Set page zero size to 4KB for mapping memory below 4GB.
  LDFLAGS_JDKEXE += -pagezero_size 0x1000
endif

ifeq (true,$(OPENJ9_ENABLE_CMAKE))
  OPENJ9_VM_BUILD_DIR := $(OUTPUT_ROOT)/vm/runtime
else
  OPENJ9_VM_BUILD_DIR := $(OUTPUT_ROOT)/vm
endif
